plugins {
	id 'org.hidetake.ssh' version '2.7.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'application'

mainClassName = "app.SimpleWebServer"

repositories {
    maven {
        url "https://maven.csse.rose-hulman.edu/artifactory/libs-release"
    }
}

dependencies {
	testCompile 'junit:junit:4.+'
    testCompile 'edu.rosehulman.csse477.buildswebservers4fun:defaultServlet:1.2.+'

	compile group: 'com.google.http-client', name: 'google-http-client', version: '1.22.0'
	compile group: 'com.google.http-client', name: 'google-http-client-jackson', version: '1.22.0'
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.7'
  	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'
    compile(group: 'com.google.code.gson', name: 'gson', version: '2.5')
}

task copyDefaultServlet(type: Copy) {
    into "plugins"

	from configurations.testRuntime.filter { it.name.startsWith('defaultServlet')}
}

test.dependsOn copyDefaultServlet

sourceCompatibility = 1.8
targetCompatibility = 1.8


group = "edu.rosehulman.csse477.buildswebservers4fun"

if (System.getenv("CI_BUILD_TAG") != null) {
    version = "${System.getenv("CI_BUILD_TAG")}"
} else {
    version = '1.0.0-SNAPSHOT'
}


jar {
    manifest {
        attributes "Implementation-Title": "Webserver3000",
                "Implementation-Version": "${version}",
                'Main-Class': 'app.SimpleWebServer'
    }
}


task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Version': version,
                'Main-Class': 'app.SimpleWebServer'
    }
    baseName = 'WebServer'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task prod(dependsOn: [clean, build, test, fatJar]) {
    build.mustRunAfter clean
    fatJar.mustRunAfter test
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: "file://${buildDir}/repo")
		}
	}
}

task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
			artifact packageSources
        }
    }
}

publishing {
    repositories {
        maven {
            credentials {
                username System.getenv('MAVEN_USER')
                password System.getenv('MAVEN_PASSWORD')
            }
            url "https://maven.csse.rose-hulman.edu/artifactory/student-release-local"
        }
    }
}

// Code coverage analyzer
jacoco {
	toolVersion = "0.7.+"
}

jacocoTestReport {
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
	additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
	
	reports {
		xml.enabled true
		csv.enabled false
		html.enabled true
	}
}


test {
	jacoco {
		append = false
	}
	testLogging.showStandardStreams = true
}

test.finalizedBy(jacocoTestReport)

task codeCoverageInfo (dependsOn: jacocoTestReport) {
	ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
	doLast {
		println "Transforming source file."
		
		def parser = new XmlParser()
		parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false);
		parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
		parser.setFeature("http://xml.org/sax/features/namespaces", false)
				  
		def reportNode = parser.parse(srcFile)
		reportNode.children().each {
			if(it.name() == 'counter') {
				String type = it.@type
				float missed = it.@missed as float
				float covered = it.@covered as float
				float percentage = covered / (missed + covered) * 100
				println "Code Coverage[$type]: $percentage%"
			}
		}
	}
}
jacocoTestReport.finalizedBy(codeCoverageInfo)

// SSH Publishing
ssh.settings { knownHosts = allowAnyHosts }
remotes {
	prod {
		host = '477-38.csse.rose-hulman.edu'
		user = System.getenv('SSH_USER')
		password = System.getenv('SSH_PASSWORD')
	}
	test {
		host = '477-33.csse.rose-hulman.edu'
		user = System.getenv('SSH_USER')
		password = System.getenv('SSH_PASSWORD')
	}
}

task publishToTest(dependsOn: prod) << {
	ssh.run {
		session(remotes.test) {
			println "Checking if remote /tmp/webserver exists ..."
			def result = execute('if test -d /tmp/webserver; then echo "exists"; fi')						
			if(result != "exists") {
				println("Remote /tmp/webserver does not exist, creating a new one...")
				execute('mkdir -p /tmp/webserver')
				println("Remote /tmp/webserver created!")
			}
			println "Transfering file from local build/distributions to remote /tmp/webserver ..."
			put from: "${buildDir}/libs/WebServer-*.jar", into: '/tmp/webserver'
			println "Files transfer complete now setting up the web server ..."
			execute('/etc/init.d/testServer stop &')
			sleep(1000)
			execute('rm -rf /home/csse/webserver/jar', pty: true)
			execute('mkdir -p /home/csse/webserver/jar', pty: true)
			println "Copying data from the temp folder to the web folder ..."
			execute('cp /tmp/webserver/* /home/csse/webserver/jar', pty: true)
			println "Done! Clearing the tmp folder ..."
			execute('rm -rf /tmp/webserver')
			execute('/etc/init.d/testServer start > /dev/null')
			sleep(1000)
			execute('sh /home/csse/test.sh')
			println "All done!" 
			println "Webserver has been deployed to http://477-33.csse.rose-hulman.edu:8080"
		}
	}
}

task publishToProd(dependsOn: prod) << {
	ssh.run {
		session(remotes.prod) {
			println "Checking if remote /tmp/webserver exists ..."
			def result = execute('if test -d /tmp/webserver; then echo "exists"; fi')						
			if(result != "exists") {
				println("Remote /tmp/webserver does not exist, creating a new one...")
				execute('mkdir -p /tmp/webserver')
				println("Remote /tmp/webserver created!")
			}
			println "Transfering file from local build/distributions to remote /tmp/webserver ..."
			put from: "${buildDir}/libs/WebServer-*.jar", into: '/tmp/webserver'
			println "Files transfer complete now setting up the web server ..."
			execute('/etc/init.d/testServer stop &')
			sleep(1000)
			execute('rm -rf /home/csse/webserver/jar', pty: true)
			execute('mkdir -p /home/csse/webserver/jar', pty: true)
			println "Copying data from the temp folder to the web folder ..."
			execute('cp /tmp/webserver/* /home/csse/webserver/jar', pty: true)
			println "Done! Clearing the tmp folder ..."
			execute('rm -rf /tmp/webserver')
			execute('/etc/init.d/testServer start > /dev/null')
			sleep(1000)
			execute('sh /home/csse/test.sh')
			println "All done!" 
			println "Webserver has been deployed to http://477-38.csse.rose-hulman.edu:8080"
		}
	}
}